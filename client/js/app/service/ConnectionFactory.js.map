{"version":3,"sources":["../../app-es6/service/ConnectionFactory.js"],"names":["stores","db","version","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","error","name","console","log","forEach","objectStoreNames","contains","item","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,kB,GAAS,CAAC,aAAD,C;AACPC,c,GAAK,U;AACLC,mB,GAAU,E;AAEZC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAEEC,iB;AAED,6CACA;AAAA;;AACI,0BAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACH;;;;oDAGD;AACI,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;;AAE/B,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,EAAtB,EAAyBC,OAAzB,CAAlB;;AAEAQ,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EACA;AACGA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAI;AAClB,8CAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACJ,qCAFD;AAGF;;AAEDE,wCAAQL,UAAR;AACH,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBZ,uCAAOO,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,6BAFD;AAGL,yBAxBM,CAAP;AAyBH;;;sDAGD;AACKnB;AACAD,qCAAa,IAAb;AACJ;;;kDAEoBA,U,EACrB;AACEqB,gCAAQC,GAAR,CAAY,MAAZ;;AAEEzB,+BAAO0B,OAAP,CAAe,gBAAO;AACjB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,IAArC,CAAH,EACA;AACG1B,2CAAW2B,iBAAX,CAA6BD,IAA7B;AACF;AACDL,oCAAQC,GAAR,CAAYI,IAAZ;AACA1B,uCAAW4B,iBAAX,CAA6BF,IAA7B,EAAkC,EAACG,eAAc,IAAf,EAAlC;AAEJ,yBARD;AASH","file":"ConnectionFactory.js","sourcesContent":["    var stores = ['negociacoes'];\r\n    const db = 'sandroni';\r\n    const version = 11;\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    export  class ConnectionFactory\r\n            {\r\n                 constructor()\r\n                 {\r\n                     throw new Error('Não é possível instanciar uma ConnectionFactory');\r\n                 }\r\n\r\n                 static getConnection()\r\n                 {\r\n                     return new Promise((resolve,reject)=>{\r\n\r\n                           let openRequest = window.indexedDB.open(db,version);\r\n\r\n                           openRequest.onupgradeneeded = e => {\r\n                               ConnectionFactory._createStores(e.target.result);\r\n                           }\r\n\r\n                           openRequest.onsuccess = e => {\r\n                               if(!connection)\r\n                               {\r\n                                  connection = e.target.result;\r\n                                  close = connection.close.bind(connection);\r\n                                  connection.close = ()=>{\r\n                                       throw new Error('Você não pode fechar a conexão');\r\n                                  }\r\n                               }\r\n\r\n                               resolve(connection);\r\n                           }\r\n\r\n                           openRequest.onerror = e => {\r\n                               reject(e.target.error.name);\r\n                           }\r\n                     });\r\n                 }\r\n\r\n                 static closeConnection()\r\n                 {\r\n                      close();\r\n                      connection = null;\r\n                 }\r\n\r\n                 static _createStores(connection)\r\n                 {\r\n                   console.log('aqui');\r\n\r\n                     stores.forEach(item =>{\r\n                          if(connection.objectStoreNames.contains(item))\r\n                          {\r\n                             connection.deleteObjectStore(item);\r\n                          }\r\n                          console.log(item);\r\n                          connection.createObjectStore(item,{autoIncrement:true});\r\n\r\n                     });\r\n                 }\r\n            }\r\n"]}